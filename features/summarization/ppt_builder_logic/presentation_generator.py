# presentation_generator.py
import logging
import os
import re
from io import BytesIO
from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import MSO_ANCHOR, PP_PARAGRAPH_ALIGNMENT
from pptx.dml.color import RGBColor
from pptx.enum.shapes import MSO_SHAPE
from urllib.parse import urlparse

# Template definitions
TEMPLATES = {
    'professional': { 'title_color': RGBColor(0, 32, 96), 'accent_color': RGBColor(0, 112, 192), 'background_color': RGBColor(255, 255, 255), 'text_color': RGBColor(51, 51, 51), 'notes_suggestion_color': RGBColor(0, 100, 0)},
    'creative': { 'title_color': RGBColor(113, 43, 124), 'accent_color': RGBColor(216, 101, 79), 'background_color': RGBColor(249, 245, 237), 'text_color': RGBColor(64, 64, 64), 'notes_suggestion_color': RGBColor(113, 43, 124)},
    'minimalist': { 'title_color': RGBColor(64, 64, 64), 'accent_color': RGBColor(128, 128, 128), 'background_color': RGBColor(255, 255, 255), 'text_color': RGBColor(51, 51, 51), 'notes_suggestion_color': RGBColor(80, 80, 80)}
}
DEFAULT_TEMPLATE_NAME = 'professional' # Define default here


# --- Helper function for visual placeholder ---
def add_visual_placeholder(slide, visual_desc, template, left, top, width, height):
    """Adds a styled placeholder shape with the visual suggestion text."""
    try:
        shape = slide.shapes.add_shape(MSO_SHAPE.ROUNDED_RECTANGLE, left, top, width, height)
        shape.fill.solid(); shape.fill.fore_color.rgb = RGBColor(245, 245, 245)
        shape.line.color.rgb = template.get('accent_color', RGBColor(128, 128, 128)); shape.line.width = Pt(1.0)
        tf = shape.text_frame
        tf.margin_bottom=Inches(0.1); tf.margin_left=Inches(0.1); tf.margin_right=Inches(0.1); tf.margin_top=Inches(0.1)
        tf.vertical_anchor = MSO_ANCHOR.MIDDLE; tf.word_wrap = True; tf.clear()
        p_title = tf.add_paragraph(); run_title = p_title.add_run(); run_title.text = "Suggested Visual"
        run_title.font.bold = False; run_title.font.color.rgb = RGBColor(150, 150, 150); run_title.font.size = Pt(11)
        p_title.alignment = PP_PARAGRAPH_ALIGNMENT.CENTER; p_title.space_after = Pt(4)
        p_desc = tf.add_paragraph(); run_desc = p_desc.add_run()
        desc_text = visual_desc[:200] + ('...' if len(visual_desc) > 200 else '') if visual_desc else "N/A"
        run_desc.text = desc_text; run_desc.font.size = Pt(10); run_desc.font.color.rgb = RGBColor(100, 100, 100)
        p_desc.alignment = PP_PARAGRAPH_ALIGNMENT.CENTER
    except Exception as e:
        logging.error(f"Failed adding visual placeholder: {e}", exc_info=False)
        # Optional: Fallback text box if shape fails

# --- Helper function for notes ---
def add_formatted_notes(notes_text_frame, slide_data, template):
    """Adds structured and formatted notes to the notes slide page."""
    notes_tf = notes_text_frame
    try: notes_tf.clear()
    except Exception as e: logging.error(f"Failed clear notes frame: {e}"); return

    default_suggestion = "Suggestion not provided by AI."
    suggestion_color = template.get('notes_suggestion_color', RGBColor(0, 100, 0))
    text_color = template.get('text_color', RGBColor(51, 51, 51))
    missing_color = RGBColor(128, 128, 128)

    def add_section(title, key, is_suggestion=False):
        content = slide_data.get(key, '').strip()
        is_missing = is_suggestion and (not content or content == default_suggestion)
        final_content = content if not is_missing else "(Suggestion not generated by AI)"
        if final_content or is_suggestion:
            try:
                p_title = notes_tf.add_paragraph(); run_title = p_title.add_run(); run_title.text = title
                run_title.font.bold = True; run_title.font.size = Pt(11); p_title.space_after = Pt(2)
                p_content = notes_tf.add_paragraph(); run_content = p_content.add_run(); run_content.text = final_content
                run_content.font.size = Pt(10); p_content.level = 0; p_content.space_after = Pt(6)
                if is_suggestion:
                    run_title.font.color.rgb = suggestion_color; run_content.font.italic = True
                    run_content.font.color.rgb = missing_color if is_missing else suggestion_color
                else:
                    run_title.font.color.rgb = text_color; run_content.font.color.rgb = text_color
            except Exception as e: logging.error(f"Error adding section '{title}' to notes: {e}")

    sections = [
        {"title": "Speaker Notes:", "key": "notes"}, {"title": "Elaboration / Talking Points:", "key": "elaboration"},
        {"title": "üí° Enhancement Suggestion:", "key": "enhancement_suggestion", "is_suggestion": True},
        {"title": "‚≠ê Best Practice Tip:", "key": "best_practice_tip", "is_suggestion": True},
        {"title": "Design Note:", "key": "design_note"} ]
    for s in sections: add_section(s["title"], s["key"], s.get("is_suggestion", False))

# --- Main PPTX Creation Function ---
def create_presentation(all_slides_data: dict, template_name='professional', any_truncated=False, num_processed=0):
    """
    Creates a PowerPoint presentation from structured slide data.
    Handles single or multiple sources (files/URL).

    Args:
        all_slides_data (dict): Dictionary where keys are source identifiers (filenames/URLs)
                                and values are lists of slide dictionaries or error strings.
        template_name (str): Name of the template to use.
        any_truncated (bool): Whether any source text was truncated.
        num_processed (int): Total number of sources attempted (including errors).

    Returns:
        BytesIO: Buffer containing the generated PPTX file.
    """
    prs = Presentation()
    template = TEMPLATES.get(template_name, TEMPLATES[DEFAULT_TEMPLATE_NAME])
    prs.slide_width = Inches(13.333)
    prs.slide_height = Inches(7.5)
    num_sources = len(all_slides_data)
    logging.info(f"Creating presentation for {num_sources} source(s).")

    # --- Add Title Slide ---
    try:
        title_layout = prs.slide_layouts[0]
        slide = prs.slides.add_slide(title_layout)
        title_ph = slide.shapes.title
        subtitle_ph = None
        for shape in slide.placeholders: # Find subtitle placeholder more reliably
             if shape.placeholder_format.idx == 1 and 'Subtitle' in shape.name: subtitle_ph = shape; break
             elif shape.placeholder_format.idx == 1: subtitle_ph = shape # Fallback if name doesn't match
        if subtitle_ph is None and len(slide.placeholders) > 1: # Further fallback
             if slide.placeholders[1] != title_ph: subtitle_ph = slide.placeholders[1]

        title_text = f"Presentation Summary"
        processed_sources = list(all_slides_data.keys())
        subtitle_text = ""
        if num_sources == 1:
             source_key = processed_sources[0]
             if source_key.startswith(('http://', 'https://')) and len(source_key) > 60:
                 try: parsed_url = urlparse(source_key); display_key = parsed_url.netloc + (parsed_url.path[:20] + '...' if len(parsed_url.path) > 20 else parsed_url.path); title_text = f"Summary: {display_key}"
                 except: title_text = f"Web Page Summary"
             else: title_text = f"Summary: '{source_key}'"
             subtitle_text = f"Source: {source_key}"
        elif num_sources > 1:
            title_text = f"Presentation from {num_sources} Documents"
            # Optionally list sources if not too many
            # max_sources_to_list = 5
            # listed_sources = processed_sources[:max_sources_to_list]
            # subtitle_text = "Source Documents:\n" + "\n".join(f"- {f}" for f in listed_sources)
            # if len(processed_sources) > max_sources_to_list: subtitle_text += "\n- ..."

        # Populate title placeholder
        if title_ph and title_ph.has_text_frame:
             tf = title_ph.text_frame; tf.clear(); p = tf.paragraphs[0] if tf.paragraphs else tf.add_paragraph(); run = p.add_run(); run.text = title_text
             run.font.color.rgb = template['title_color']; run.font.size = Pt(44); run.font.bold = True
             tf.vertical_anchor = MSO_ANCHOR.MIDDLE; p.alignment = PP_PARAGRAPH_ALIGNMENT.CENTER
        elif title_ph: title_ph.text = title_text
        else: logging.warning("Title placeholder missing on title slide.")

        # Populate subtitle placeholder
        if subtitle_ph and subtitle_text:
             if subtitle_ph.has_text_frame:
                 tf = subtitle_ph.text_frame; tf.clear(); p = tf.paragraphs[0] if tf.paragraphs else tf.add_paragraph(); run = p.add_run(); run.text = subtitle_text
                 run.font.color.rgb = template['accent_color']; run.font.size = Pt(18); tf.vertical_anchor = MSO_ANCHOR.TOP; p.alignment = PP_PARAGRAPH_ALIGNMENT.CENTER
             else: subtitle_ph.text = subtitle_text
        elif subtitle_ph: # Clear if exists but no text
             if subtitle_ph.has_text_frame: subtitle_ph.text_frame.clear()
             else: subtitle_ph.text = ""

        # Add truncation warning if needed
        if any_truncated:
            try:
                notes_tf = slide.notes_slide.notes_text_frame
                if notes_tf: notes_tf.clear(); p = notes_tf.add_paragraph(); run = p.add_run(); run.text = "‚ö†Ô∏è Input Truncation Notice: Text from the source was truncated due to length limits or extraction issues."; run.font.bold = True; run.font.color.rgb = RGBColor(200, 0, 0); run.font.size = Pt(11); logging.info("Added truncation warning note.")
            except AttributeError: pass # Ignore if no notes slide support
            except Exception as e: logging.error(f"Error adding truncation note: {e}")
    except Exception as e: logging.error(f"Error creating Main Title Slide: {e}", exc_info=True)

    # --- Add Content Slides for Each Source ---
    content_layout = prs.slide_layouts[1] # Assuming layout 1 is Title and Content

    for source_key, source_slides in all_slides_data.items():
        logging.info(f"Adding content for source: '{source_key}'")

        # --- Add Error Slide if processing failed for this source ---
        if isinstance(source_slides, str) and "ERROR" in source_slides:
             logging.warning(f"Adding error slide for failed source '{source_key}'.")
             try:
                 slide = prs.slides.add_slide(content_layout)
                 title_shape = slide.shapes.title
                 content_ph = None
                 if len(slide.placeholders) > 1: content_ph = slide.placeholders[1]

                 if title_shape: title_shape.text = f"Error Processing Source"
                 if content_ph:
                     tf = content_ph.text_frame; tf.clear()
                     p = tf.add_paragraph(); p.text = f"Could not process source:\n{source_key}\n\nReason:\n{source_slides.replace('ERROR: ', '')[:500]}" # Show truncated error
                     p.font.color.rgb = RGBColor(200, 0, 0); p.font.size = Pt(16)
             except Exception as e: logging.error(f"Could not add error slide for '{source_key}': {e}")
             continue # Skip to next source

        # --- Add Content Slides if processing was successful ---
        if isinstance(source_slides, list) and source_slides:
            for slide_idx, slide_data in enumerate(source_slides):
                num_in_sec = slide_idx + 1
                title_err = slide_data.get('title', f'Slide {num_in_sec}')[:100]
                try:
                    slide = prs.slides.add_slide(content_layout)
                    title_shape = slide.shapes.title
                    content_ph = None
                    # Find content placeholder (improved logic)
                    title_ph_idx = title_shape.placeholder_format.idx if title_shape and hasattr(title_shape, 'placeholder_format') else -1
                    potential_indices = [1, 10, 11, 12, 13, 14, 15]
                    for idx in potential_indices:
                         try:
                             ph = slide.placeholders[idx]
                             if ph.placeholder_format.idx != title_ph_idx: content_ph = ph; break
                         except (IndexError, KeyError, AttributeError): continue
                    if content_ph is None:
                         for shape in slide.placeholders:
                              ph_idx = shape.placeholder_format.idx if hasattr(shape, 'placeholder_format') else -1
                              if ph_idx != title_ph_idx and shape.has_text_frame: content_ph = shape; break
                    if content_ph is None and len(slide.placeholders)>1 and slide.placeholders[1] != title_shape: content_ph = slide.placeholders[1]

                    # Populate Title
                    title_text = slide_data.get('title', f'Slide {num_in_sec}')
                    if title_shape and title_shape.has_text_frame:
                        tf = title_shape.text_frame; tf.clear(); p = tf.paragraphs[0] if tf.paragraphs else tf.add_paragraph(); run = p.add_run(); run.text = title_text
                        run.font.color.rgb = template['title_color']; run.font.size = Pt(32); run.font.bold = True
                    elif title_shape: title_shape.text = title_text

                    # Populate Content Placeholder
                    if content_ph:
                        tf = content_ph.text_frame; tf.clear(); tf.word_wrap = True; tf.vertical_anchor = MSO_ANCHOR.TOP
                        key_msg = slide_data.get('key_message', '').strip()
                        if key_msg:
                            p_key = tf.add_paragraph(); run_key = p_key.add_run(); run_key.text = key_msg
                            run_key.font.bold=True; run_key.font.italic=True; run_key.font.color.rgb = template['accent_color']
                            run_key.font.size = Pt(20); p_key.space_after = Pt(10); p_key.level = 0
                        bullets = slide_data.get('bullets', [])
                        for bullet in bullets:
                            bullet_clean = bullet.strip()
                            if not bullet_clean: continue
                            p_bullet = tf.add_paragraph(); p_bullet.text = bullet_clean; p_bullet.level = 0
                            if p_bullet.runs: run = p_bullet.runs[0]; run.font.size = Pt(18); run.font.color.rgb = template['text_color']
                        visual = slide_data.get('visual', '').strip(); non_visual = ["none", "none needed", "text focus", "n/a", "text only", "no visual needed", ""]
                        if visual and visual.lower() not in non_visual:
                             ph_l, ph_t, ph_w, ph_h = Inches(7.0), Inches(1.8), Inches(5.5), Inches(4.5)
                             add_visual_placeholder(slide, visual, template, ph_l, ph_t, ph_w, ph_h)
                    else: logging.warning(f"No content placeholder found on slide {num_in_sec} of '{source_key}'.")

                    # Add Notes
                    try:
                        notes_tf = slide.notes_slide.notes_text_frame
                        if notes_tf: add_formatted_notes(notes_tf, slide_data, template)
                    except AttributeError: pass
                    except Exception as e: logging.error(f"Error adding notes slide {num_in_sec} of '{source_key}': {e}")
                except Exception as e: logging.error(f"Error processing content slide {num_in_sec} ('{title_err}') for '{source_key}': {e}", exc_info=True)
        elif not isinstance(source_slides, str): # Log if data is not list or error string
             logging.warning(f"Invalid data type for source '{source_key}'. Expected list of slides or error string, got {type(source_slides)}. Skipping content.")

    # --- Add Slide Numbers and Footer ---
    try:
        logging.info("Adding slide numbers and footer...")
        footer_text = "Generated by AI Presentation Builder"
        for i, slide in enumerate(prs.slides):
            if i == 0: continue # Skip main title slide
            f_left, f_top, f_width, f_height = Inches(0.5), prs.slide_height - Inches(0.6), Inches(5.0), Inches(0.4)
            f_txBox = slide.shapes.add_textbox(f_left, f_top, f_width, f_height)
            f_tf = f_txBox.text_frame; f_tf.clear(); f_tf.margin_bottom = 0; f_tf.margin_top = 0; f_tf.margin_left = 0; f_tf.margin_right = 0
            f_p = f_tf.add_paragraph(); f_p.text = footer_text; f_p.font.size = Pt(9); f_p.font.color.rgb = RGBColor(150, 150, 150); f_p.alignment = PP_PARAGRAPH_ALIGNMENT.LEFT
            n_left, n_top, n_width, n_height = prs.slide_width - Inches(1.0), prs.slide_height - Inches(0.6), Inches(0.8), Inches(0.4)
            n_txBox = slide.shapes.add_textbox(n_left, n_top, n_width, n_height)
            n_tf = n_txBox.text_frame; n_tf.clear(); n_tf.margin_bottom=0; n_tf.margin_top=0; n_tf.margin_left=0; n_tf.margin_right=0
            n_p = n_tf.add_paragraph(); n_p.text = str(i + 1); n_p.font.size = Pt(9); n_p.font.color.rgb = RGBColor(150, 150, 150); n_p.alignment = PP_PARAGRAPH_ALIGNMENT.RIGHT
    except Exception as e: logging.warning(f"Could not add footers/numbers: {e}")

    # --- Save Presentation ---
    pptx_buffer = BytesIO()
    try:
        prs.save(pptx_buffer)
        pptx_buffer.seek(0)
        logging.info(f"Presentation created ({len(prs.slides)} slides).")
        return pptx_buffer
    except Exception as e:
        logging.error(f"Failed saving presentation buffer: {e}", exc_info=True)
        raise IOError(f"Could not save PPTX: {e}") from e